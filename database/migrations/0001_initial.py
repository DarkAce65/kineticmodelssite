# Generated by Django 3.0a1 on 2019-10-17 20:37

import database.models.kinetic_model
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: surname, firstname', max_length=80)),
            ],
        ),
        migrations.CreateModel(
            name='Authorship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(verbose_name='Order of authorship')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Author')),
            ],
        ),
        migrations.CreateModel(
            name='BaseKineticsData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_temp', models.FloatField(blank=True, help_text='units: K', null=True, verbose_name='Lower Temp Bound')),
                ('max_temp', models.FloatField(blank=True, help_text='units: K', null=True, verbose_name='Upper Temp Bound')),
                ('min_pressure', models.FloatField(blank=True, help_text='units: Pa', null=True, verbose_name='Lower Pressure Bound')),
                ('max_pressure', models.FloatField(blank=True, help_text='units: Pa', null=True, verbose_name='Upper Pressure Bound')),
            ],
        ),
        migrations.CreateModel(
            name='Isomer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inchi', models.CharField(blank=True, max_length=500, verbose_name='InChI')),
            ],
        ),
        migrations.CreateModel(
            name='KineticModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mPrimeID', models.CharField(blank=True, max_length=9, verbose_name='PrIMe ID')),
                ('modelName', models.CharField(default=uuid.uuid4, max_length=200, unique=True)),
                ('additionalInfo', models.CharField(blank=True, max_length=1000)),
                ('chemkinReactionsFile', models.FileField(upload_to=database.models.kinetic_model.upload_chemkin_to)),
                ('chemkinThermoFile', models.FileField(upload_to=database.models.kinetic_model.upload_thermo_to)),
                ('chemkinTransportFile', models.FileField(blank=True, upload_to=database.models.kinetic_model.upload_transport_to)),
                ('rmgImportPath', models.CharField(blank=True, max_length=300)),
            ],
            options={
                'verbose_name_plural': 'Kinetic Models',
            },
        ),
        migrations.CreateModel(
            name='Kinetics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rkPrimeID', models.CharField(blank=True, max_length=10)),
                ('relativeUncertainty', models.FloatField(blank=True, null=True)),
                ('isReverse', models.BooleanField(default=False, help_text='Is this the rate for the reverse reaction?')),
            ],
            options={
                'verbose_name_plural': 'Kinetics',
            },
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rPrimeID', models.CharField(max_length=10, unique=True, verbose_name='PrIMe ID')),
                ('isReversible', models.BooleanField(default=True, help_text='Is this reaction reversible?')),
            ],
            options={
                'ordering': ('rPrimeID',),
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bPrimeID', models.CharField(blank=True, default='', max_length=9, verbose_name='Prime ID')),
                ('publicationYear', models.CharField(blank=True, default='', max_length=4, verbose_name='Year of Publication')),
                ('sourceTitle', models.CharField(blank=True, default='', max_length=300)),
                ('journalName', models.CharField(blank=True, max_length=300)),
                ('journalVolumeNumber', models.CharField(blank=True, max_length=10, verbose_name='Journal Volume Number')),
                ('pageNumbers', models.CharField(blank=True, help_text='[page #]-[page #]', max_length=100)),
                ('doi', models.CharField(blank=True, max_length=80)),
                ('authors', models.ManyToManyField(blank=True, through='database.Authorship', to='database.Author')),
            ],
            options={
                'ordering': ('bPrimeID',),
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sPrimeID', models.CharField(max_length=9, verbose_name='PrIMe ID')),
                ('formula', models.CharField(blank=True, max_length=50)),
                ('inchi', models.CharField(blank=True, max_length=500, verbose_name='InChI')),
                ('cas', models.CharField(blank=True, max_length=400, verbose_name='CAS Registry Number')),
            ],
            options={
                'verbose_name_plural': 'Species',
                'ordering': ('sPrimeID',),
            },
        ),
        migrations.CreateModel(
            name='Thermo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thpPrimeID', models.CharField(blank=True, max_length=11)),
                ('preferredKey', models.CharField(blank=True, help_text='i.e. T 11/97, or J 3/65', max_length=20)),
                ('referenceTemperature', models.FloatField(blank=True, default=0.0, help_text='units: K', verbose_name='Reference State Temperature')),
                ('referencePressure', models.FloatField(blank=True, default=0.0, help_text='units: Pa', verbose_name='Reference State Pressure')),
                ('dfH', models.FloatField(blank=True, default=0.0, help_text='units: J/mol', verbose_name='Enthalpy of Formation')),
                ('lowerTempBound1', models.FloatField(default=0.0, help_text='units: K', verbose_name='Polynomial 1 Lower Temp Bound')),
                ('upperTempBound1', models.FloatField(default=0.0, help_text='units: K', verbose_name='Polynomial 1 Upper Temp Bound')),
                ('coefficient11', models.FloatField(default=0.0, verbose_name='Polynomial 1 Coefficient 1')),
                ('coefficient21', models.FloatField(default=0.0, verbose_name='Polynomial 1 Coefficient 2')),
                ('coefficient31', models.FloatField(default=0.0, verbose_name='Polynomial 1 Coefficient 3')),
                ('coefficient41', models.FloatField(default=0.0, verbose_name='Polynomial 1 Coefficient 4')),
                ('coefficient51', models.FloatField(default=0.0, verbose_name='Polynomial 1 Coefficient 5')),
                ('coefficient61', models.FloatField(default=0.0, verbose_name='Polynomial 1 Coefficient 6')),
                ('coefficient71', models.FloatField(default=0.0, verbose_name='Polynomial 1 Coefficient 7')),
                ('lowerTempBound2', models.FloatField(default=0.0, help_text='units: K', verbose_name='Polynomial 2 Lower Temp Bound')),
                ('upperTempBound2', models.FloatField(default=0.0, help_text='units: K', verbose_name='Polynomial 2 Upper Temp Bound')),
                ('coefficient12', models.FloatField(default=0.0, verbose_name='Polynomial 2 Coefficient 1')),
                ('coefficient22', models.FloatField(default=0.0, verbose_name='Polynomial 2 Coefficient 2')),
                ('coefficient32', models.FloatField(default=0.0, verbose_name='Polynomial 2 Coefficient 3')),
                ('coefficient42', models.FloatField(default=0.0, verbose_name='Polynomial 2 Coefficient 4')),
                ('coefficient52', models.FloatField(default=0.0, verbose_name='Polynomial 2 Coefficient 5')),
                ('coefficient62', models.FloatField(default=0.0, verbose_name='Polynomial 2 Coefficient 6')),
                ('coefficient72', models.FloatField(default=0.0, verbose_name='Polynomial 2 Coefficient 7')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='database.Source')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Species')),
            ],
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trPrimeID', models.CharField(blank=True, max_length=10)),
                ('geometry', models.FloatField(blank=True, default=0.0)),
                ('potentialWellDepth', models.FloatField(blank=True, default=0.0, help_text='units: K', verbose_name='Potential Well Depth')),
                ('collisionDiameter', models.FloatField(blank=True, default=0.0, help_text='units: Angstroms', verbose_name='Collision Diameter')),
                ('dipoleMoment', models.FloatField(blank=True, default=0.0, help_text='units: Debye')),
                ('polarizability', models.FloatField(blank=True, default=0.0, help_text='units: cubic Angstroms')),
                ('rotationalRelaxation', models.FloatField(blank=True, default=0.0, verbose_name='Rotational Relaxation')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='database.Source')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Species')),
            ],
        ),
        migrations.CreateModel(
            name='Arrhenius',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('AValue', models.FloatField(default=0.0)),
                ('AValueUncertainty', models.FloatField(blank=True, null=True)),
                ('nValue', models.FloatField(default=0.0)),
                ('EValue', models.FloatField(default=0.0)),
                ('EValueUncertainty', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Arrhenius Kinetics',
            },
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='ArrheniusEP',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('a', models.FloatField()),
                ('n', models.FloatField()),
                ('ep_alpha', models.FloatField()),
                ('e0', models.FloatField()),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='Chebyshev',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('coefficient_matrix', models.TextField()),
                ('units', models.CharField(max_length=25)),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='KineticsData',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('temp_array', models.TextField()),
                ('rate_coefficients', models.TextField()),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='PDepArrhenius',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='TransportComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=1000)),
                ('kineticModel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.KineticModel')),
                ('transport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Transport')),
            ],
        ),
        migrations.CreateModel(
            name='ThermoComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=1000)),
                ('kineticModel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.KineticModel')),
                ('thermo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Thermo')),
            ],
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smiles', models.CharField(blank=True, max_length=500, verbose_name='SMILES')),
                ('adjacencyList', models.TextField(verbose_name='Adjacency List')),
                ('electronicState', models.IntegerField(verbose_name='Electronic State')),
                ('isomer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Isomer')),
            ],
        ),
        migrations.CreateModel(
            name='Stoichiometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stoichiometry', models.FloatField(default=0.0)),
                ('reaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Reaction')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Species')),
            ],
            options={
                'verbose_name_plural': 'Stoichiometries',
                'unique_together': {('species', 'reaction', 'stoichiometry')},
            },
        ),
        migrations.CreateModel(
            name='SpeciesName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('kineticModel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.KineticModel')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Species')),
            ],
            options={
                'verbose_name_plural': 'Alternative Species Names',
            },
        ),
        migrations.AddField(
            model_name='reaction',
            name='species',
            field=models.ManyToManyField(through='database.Stoichiometry', to='database.Species'),
        ),
        migrations.CreateModel(
            name='KineticsComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=1000)),
                ('kineticModel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.KineticModel')),
                ('kinetics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Kinetics')),
            ],
        ),
        migrations.AddField(
            model_name='kinetics',
            name='reaction',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='database.Reaction'),
        ),
        migrations.AddField(
            model_name='kinetics',
            name='source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='database.Source'),
        ),
        migrations.AddField(
            model_name='kineticmodel',
            name='kinetics',
            field=models.ManyToManyField(blank=True, through='database.KineticsComment', to='database.Kinetics'),
        ),
        migrations.AddField(
            model_name='kineticmodel',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.Source'),
        ),
        migrations.AddField(
            model_name='kineticmodel',
            name='species',
            field=models.ManyToManyField(blank=True, through='database.SpeciesName', to='database.Species'),
        ),
        migrations.AddField(
            model_name='kineticmodel',
            name='thermo',
            field=models.ManyToManyField(blank=True, through='database.ThermoComment', to='database.Thermo'),
        ),
        migrations.AddField(
            model_name='kineticmodel',
            name='transport',
            field=models.ManyToManyField(blank=True, through='database.TransportComment', to='database.Transport'),
        ),
        migrations.AddField(
            model_name='isomer',
            name='species',
            field=models.ManyToManyField(to='database.Species'),
        ),
        migrations.CreateModel(
            name='Efficiency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('efficiency', models.FloatField()),
                ('kinetics_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.BaseKineticsData')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Species')),
            ],
        ),
        migrations.AddField(
            model_name='basekineticsdata',
            name='collider_efficiencies',
            field=models.ManyToManyField(blank=True, through='database.Efficiency', to='database.Species'),
        ),
        migrations.AddField(
            model_name='basekineticsdata',
            name='kinetics',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='database.Kinetics'),
        ),
        migrations.AddField(
            model_name='authorship',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Source'),
        ),
        migrations.CreateModel(
            name='Troe',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('alpha', models.FloatField()),
                ('t1', models.FloatField()),
                ('t2', models.FloatField()),
                ('t3', models.FloatField()),
                ('high_arrhenius', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='database.Arrhenius')),
                ('low_arrhenius', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='database.Arrhenius')),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='ThirdBody',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('low_arrhenius', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Arrhenius')),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='Pressure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pressure', models.FloatField()),
                ('arrhenius', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Arrhenius')),
                ('pdep_arrhenius', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.PDepArrhenius')),
            ],
        ),
        migrations.AddField(
            model_name='pdeparrhenius',
            name='arrhenius_set',
            field=models.ManyToManyField(through='database.Pressure', to='database.Arrhenius'),
        ),
        migrations.CreateModel(
            name='MultiPDepArrhenius',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('pdep_arrhenius_set', models.ManyToManyField(to='database.PDepArrhenius')),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='MultiArrhenius',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('arrhenius_set', models.ManyToManyField(to='database.Arrhenius')),
            ],
            bases=('database.basekineticsdata',),
        ),
        migrations.CreateModel(
            name='Lindemann',
            fields=[
                ('basekineticsdata_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='database.BaseKineticsData')),
                ('alpha', models.FloatField()),
                ('t1', models.FloatField()),
                ('t2', models.FloatField()),
                ('t3', models.FloatField()),
                ('high_arrhenius', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='database.Arrhenius')),
                ('low_arrhenius', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='database.Arrhenius')),
            ],
            bases=('database.basekineticsdata',),
        ),
    ]
